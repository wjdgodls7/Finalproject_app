{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/taggedTemplateLiteralLoose\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\GG\\\\Documents\\\\finalproject\\\\semicolon-app\\\\screens\\\\auth\\\\Login.js\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteralLoose([\"\\n  justify-content: center;\\n  align-items: center;\\n  flex: 1;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState } from \"react\";\nimport styled from \"styled-components/native\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport AuthButton from \"../../components/AuthButton\";\nimport AuthInput from \"../../components/AuthInput\";\nimport useInput from \"../../hooks/useInput\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { useMutation } from 'react-apollo-hooks';\nimport { CHECK_EMAIL } from \"./AuthQueries\";\nvar View = styled.View(_templateObject());\nexport default (function (_ref) {\n  var navigation = _ref.navigation;\n  var emailInput = useInput(navigation.getParam(\"email\", \"\"));\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useMutation = useMutation(CHECK_EMAIL, {\n    variables: {\n      email: emailInput.value\n    }\n  }),\n      _useMutation2 = _slicedToArray(_useMutation, 1),\n      checkemailmutation = _useMutation2[0];\n\n  var handleLogin = function handleLogin() {\n    var value, emailRegex, _await$checkemailmuta, checkemail;\n\n    return _regeneratorRuntime.async(function handleLogin$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            value = emailInput.value;\n            emailRegex = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\n            if (!(value === \"\")) {\n              _context.next = 6;\n              break;\n            }\n\n            return _context.abrupt(\"return\", Alert.alert(\"이메일을 제대로 입력해 주세요\"));\n\n          case 6:\n            if (!(!value.includes(\"@\") || !value.includes(\".\"))) {\n              _context.next = 10;\n              break;\n            }\n\n            return _context.abrupt(\"return\", Alert.alert(\"이메일을 제대로 입력해 주세요\"));\n\n          case 10:\n            if (emailRegex.test(value)) {\n              _context.next = 12;\n              break;\n            }\n\n            return _context.abrupt(\"return\", Alert.alert(\"이메일을 제대로 입력해 주세요\"));\n\n          case 12:\n            _context.next = 14;\n            return _regeneratorRuntime.awrap(checkemailmutation());\n\n          case 14:\n            _await$checkemailmuta = _context.sent;\n            checkemail = _await$checkemailmuta.data.checkemail;\n            console.log(checkemail);\n\n            try {\n              setLoading(true);\n\n              if (checkemail) {\n                Alert.alert(\"비밀번호를 입력해주세요\");\n                navigation.navigate(\"LoginConfirm\", {\n                  email: value\n                });\n              } else {\n                Alert.alert(\"Woops! 계정을 찾을수없어요!\");\n                navigation.navigate(\"CheckEmail\");\n              }\n            } catch (error) {\n              console.log(error);\n              Alert.alert(\"지금은 로그인할수 없어요 😥\");\n            } finally {\n              setLoading(false);\n            }\n\n          case 18:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(TouchableWithoutFeedback, {\n    onPress: Keyboard.dismiss,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }, React.createElement(AuthInput, _extends({}, emailInput, {\n    placeholder: \"\\uC774\\uBA54\\uC77C\",\n    keyboardType: \"email-address\",\n    returnKeyType: \"send\",\n    onSubmitEditing: handleLogin,\n    autoCorrect: false,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  })), React.createElement(AuthButton, {\n    loading: loading,\n    onPress: handleLogin,\n    text: \"\\uB85C\\uADF8\\uC778\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  })));\n});","map":{"version":3,"sources":["C:/Users/GG/Documents/finalproject/semicolon-app/screens/auth/Login.js"],"names":["React","useState","styled","AuthButton","AuthInput","useInput","useMutation","CHECK_EMAIL","View","navigation","emailInput","getParam","loading","setLoading","variables","email","value","checkemailmutation","handleLogin","emailRegex","Alert","alert","includes","test","checkemail","data","console","log","navigate","error","Keyboard","dismiss"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport styled from \"styled-components/native\";\r\nimport { TouchableWithoutFeedback, Keyboard } from \"react-native\";\r\nimport AuthButton from \"../../components/AuthButton\";\r\nimport AuthInput from \"../../components/AuthInput\";\r\nimport useInput from \"../../hooks/useInput\";\r\nimport { Alert } from \"react-native\";\r\nimport { useMutation } from 'react-apollo-hooks';\r\nimport { CHECK_EMAIL } from './AuthQueries';\r\n\r\nconst View = styled.View`\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex: 1;\r\n`;\r\n\r\nexport default ({ navigation }) => {\r\n  const emailInput = useInput(navigation.getParam(\"email\", \"\"));\r\n  const [loading, setLoading] = useState(false);\r\n  const [checkemailmutation] = useMutation(CHECK_EMAIL, {\r\n    variables: {\r\n      email: emailInput.value\r\n    }\r\n\r\n  });\r\n  const handleLogin = async () => {\r\n    const { value } = emailInput;\r\n    const emailRegex = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n    if (value === \"\") {\r\n      return Alert.alert(\"이메일을 제대로 입력해 주세요\");\r\n    } else if (!value.includes(\"@\") || !value.includes(\".\")) {\r\n      return Alert.alert(\"이메일을 제대로 입력해 주세요\");\r\n    } else if (!emailRegex.test(value)) {\r\n      return Alert.alert(\"이메일을 제대로 입력해 주세요\");\r\n    }\r\n    const { data: { checkemail } } = await checkemailmutation();\r\n    console.log(checkemail);\r\n    try {\r\n      setLoading(true);\r\n      if (checkemail) {\r\n        Alert.alert(\"비밀번호를 입력해주세요\");\r\n        navigation.navigate(\"LoginConfirm\", { email: value });\r\n\r\n      } else {\r\n        Alert.alert(\"Woops! 계정을 찾을수없어요!\");\r\n        navigation.navigate(\"CheckEmail\");\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n      Alert.alert(\"지금은 로그인할수 없어요 😥\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  return (\r\n    <TouchableWithoutFeedback onPress={Keyboard.dismiss}>\r\n      <View>\r\n        <AuthInput\r\n          {...emailInput}\r\n          placeholder=\"이메일\"\r\n          keyboardType=\"email-address\"\r\n          returnKeyType=\"send\"\r\n          onSubmitEditing={handleLogin}\r\n          autoCorrect={false}\r\n        />\r\n        <AuthButton loading={loading} onPress={handleLogin} text=\"로그인\" />\r\n      </View>\r\n    </TouchableWithoutFeedback>\r\n  );\r\n};"]},"metadata":{},"sourceType":"module"}