{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/taggedTemplateLiteralLoose\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\GG\\\\Documents\\\\finalproject\\\\semicolon-app\\\\navigation\\\\EventNavigation\\\\NavigationPresenter.js\";\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteralLoose([\"\\n  query todayInfo($location:String!, $latitude: Float! ,$longitude:Float!) {\\n    todayInfo(location:$location, latitude: $latitude, longitude:$longitude){\\n        newCase\\n        countryName\\n        temp \\n        weather\\n        }\\n    }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteralLoose([\"\\n  margin-top : -30px;\\n  margin-bottom : -30px;\\n  width: \", \";\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components/native\";\nimport constants from \"../../Constants\";\nimport { useQuery } from \"react-apollo-hooks\";\nimport { gql } from 'apollo-boost';\nimport NavigationView from \"./NavigationView\";\nvar Image = styled.Image(_templateObject(), constants.width / 3);\nvar GET_TODAYINFO = gql(_templateObject2());\nexport default (function (_ref) {\n  var location = _ref.location;\n\n  var _useQuery = useQuery(GET_TODAYINFO, {\n    variables: {\n      location: location.region,\n      latitude: location.latitude,\n      longitude: location.longitude\n    }\n  }),\n      data = _useQuery.data,\n      loading = _useQuery.loading;\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      index = _useState2[0],\n      setIndex = _useState2[1];\n\n  var saveViews = function saveViews() {\n    if (index === 2) {\n      setTimeout(function () {\n        return setIndex(0);\n      }, 5000);\n    } else {\n      setTimeout(function () {\n        return setIndex(index + 1);\n      }, 5000);\n    }\n  };\n\n  useEffect(function () {\n    saveViews();\n  }, [index]);\n  return loading ? React.createElement(Image, {\n    resizeMode: \"contain\",\n    source: require(\"../../assets/logo.png\"),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 22\n    }\n  }) : React.createElement(NavigationView, {\n    index: index,\n    countryName: data.todayInfo.countryName,\n    newCase: data.todayInfo.newCase,\n    weather: data.todayInfo.weather,\n    temp: data.todayInfo.temp,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 11\n    }\n  });\n});","map":{"version":3,"sources":["C:/Users/GG/Documents/finalproject/semicolon-app/navigation/EventNavigation/NavigationPresenter.js"],"names":["React","useState","useEffect","styled","constants","useQuery","gql","NavigationView","Image","width","GET_TODAYINFO","location","variables","region","latitude","longitude","data","loading","index","setIndex","saveViews","setTimeout","require","todayInfo","countryName","newCase","weather","temp"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA2BC,SAA3B,QAA4C,OAA5C;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,SAAP;AACA,SAASC,QAAT,QAAyB,oBAAzB;AACA,SAASC,GAAT,QAAoB,cAApB;AACA,OAAOC,cAAP;AAEA,IAAMC,KAAK,GAAGL,MAAM,CAACK,KAAV,oBAGAJ,SAAS,CAACK,KAAV,GAAkB,CAHlB,CAAX;AAMA,IAAMC,aAAa,GAAGJ,GAAH,oBAAnB;AAWA,gBAAe,gBAAkB;AAAA,MAAfK,QAAe,QAAfA,QAAe;;AAAA,kBAEJN,QAAQ,CAACK,aAAD,EAAgB;AACjDE,IAAAA,SAAS,EAAE;AACTD,MAAAA,QAAQ,EAAEA,QAAQ,CAACE,MADV;AAETC,MAAAA,QAAQ,EAAEH,QAAQ,CAACG,QAFV;AAGTC,MAAAA,SAAS,EAAEJ,QAAQ,CAACI;AAHX;AADsC,GAAhB,CAFJ;AAAA,MAEvBC,IAFuB,aAEvBA,IAFuB;AAAA,MAEhBC,OAFgB,aAEhBA,OAFgB;;AAAA,kBAULhB,QAAQ,CAAC,CAAD,CAVH;AAAA;AAAA,MAUxBiB,KAVwB;AAAA,MAUjBC,QAViB;;AAY/B,MAAMC,SAAS,GAAG,SAAZA,SAAY,GAAM;AACxB,QAAIF,KAAK,KAAK,CAAd,EAAiB;AACbG,MAAAA,UAAU,CAAC;AAAA,eAAMF,QAAQ,CAAC,CAAD,CAAd;AAAA,OAAD,EAAoB,IAApB,CAAV;AACD,KAFH,MAES;AACLE,MAAAA,UAAU,CAAC;AAAA,eAAMF,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAd;AAAA,OAAD,EAA4B,IAA5B,CAAV;AACD;AACF,GAND;;AAQAhB,EAAAA,SAAS,CAAC,YAAM;AACdkB,IAAAA,SAAS;AACV,GAFQ,EAEP,CAACF,KAAD,CAFO,CAAT;AAIA,SAAQD,OAAO,GAAI,oBAAC,KAAD;AAAO,IAAA,UAAU,EAAE,SAAnB;AAA8B,IAAA,MAAM,EAAEK,OAAO,yBAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAJ,GACP,oBAAE,cAAF;AAAiB,IAAA,KAAK,EAAIJ,KAA1B;AACE,IAAA,WAAW,EAAKF,IAAI,CAACO,SAAL,CAAeC,WADjC;AAEE,IAAA,OAAO,EAAKR,IAAI,CAACO,SAAL,CAAeE,OAF7B;AAGE,IAAA,OAAO,EAAKT,IAAI,CAACO,SAAL,CAAeG,OAH7B;AAIE,IAAA,IAAI,EAAKV,IAAI,CAACO,SAAL,CAAeI,IAJ1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADR;AAQD,CAhCD","sourcesContent":["import React, { useState , useEffect } from \"react\";\r\nimport styled from \"styled-components/native\";\r\nimport constants from \"../../Constants\";\r\nimport { useQuery } from \"react-apollo-hooks\";\r\nimport { gql } from 'apollo-boost';\r\nimport NavigationView from \"./NavigationView\";\r\n\r\nconst Image = styled.Image`\r\n  margin-top : -30px;\r\n  margin-bottom : -30px;\r\n  width: ${constants.width / 3};\r\n`;\r\n\r\nconst GET_TODAYINFO = gql`\r\n  query todayInfo($location:String!, $latitude: Float! ,$longitude:Float!) {\r\n    todayInfo(location:$location, latitude: $latitude, longitude:$longitude){\r\n        newCase\r\n        countryName\r\n        temp \r\n        weather\r\n        }\r\n    }\r\n`;\r\n\r\nexport default ({ location }) => {\r\n  \r\n  const { data , loading } = useQuery(GET_TODAYINFO, {\r\n    variables: {\r\n      location: location.region,\r\n      latitude: location.latitude,\r\n      longitude: location.longitude\r\n    }\r\n  });\r\n  \r\n  const [index, setIndex] = useState(0);\r\n  \r\n  const saveViews = () => { \r\n  if (index === 2) {\r\n      setTimeout(() => setIndex(0), 5000);\r\n    } else {\r\n      setTimeout(() => setIndex(index + 1), 5000);\r\n    }\r\n  }\r\n\r\n  useEffect(() => { \r\n    saveViews();\r\n  },[index])\r\n\r\n  return (loading ? (<Image resizeMode={\"contain\"} source={require(\"../../assets/logo.png\")} />)\r\n    :     < NavigationView index = {index}\r\n            countryName = { data.todayInfo.countryName }\r\n            newCase = { data.todayInfo.newCase }\r\n            weather = { data.todayInfo.weather }\r\n            temp = { data.todayInfo.temp } />\r\n  \r\n  )\r\n};"]},"metadata":{},"sourceType":"module"}